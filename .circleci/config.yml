# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1

aliases:
  - filters: &filters
      branches:
        ignore: /.*/
      tags:
        only: /.*/
  - &cache_key cache_key

orbs:
  owasp: entur/owasp@0.0.19
  gradle: entur/gradle-orb@0.0.9

executors:
  java_17:
    docker:
      - image: cimg/openjdk:17.0
        environment:
          _JAVA_OPTIONS: -Xmx2048m
          TERM: dumb
    resource_class: xlarge

commands:
  build:
    parameters:
      publish:
        description: Publish artifacts
        type: boolean
        default: false  
    steps:
      - run:
          name: 'Run Gradle build'
          command: |
            ./gradlew build
      - when:
          condition: << parameters.publish >>
          steps:
            - publish

  with_cache:
    parameters:
      steps:
        type: steps
    steps:
      - gradle/with_cache:
          cache_key: *cache_key
          steps:
            - steps: << parameters.steps >>

  merge_develop_to_master:
    steps:
      - run:
          name: Merge develop into master branch (triggering production builds)
          command: |
            git checkout master
            # get latest changes on master
            git pull
            git merge --no-edit develop
            git push origin HEAD

  configure_git_for_commit:
    steps:
      - add_ssh_keys:
          fingerprints:
            - $SSH_FINGERPRINT
      - run:
          name: Configure git user
          command: |
            git config --global user.email "circleci@entur.no"
            git config --global user.name "circleci"

jobs:
  build:
    executor: java_17
    steps:
      - checkout
      - with_cache:
          steps:
            - run:
                name: Build
                command: |
                  ./gradlew build                

  publish_team:
    executor: java_17
    steps:
      - checkout
      - with_cache:
          steps:
            - run:
                name: Build
                command: |
                  ./gradlew -x test build publish

  publish_partner:
    executor: java_17
    steps:
      - checkout
      - with_cache:
          steps:
            - run:
                name: Build
                command: |
                  ./gradlew -PpublishTarget=partner -x test build publish


  create-git-release:
    executor: java_17
    steps:
      - checkout
      - configure_git_for_commit
      - with_cache:
          steps:
            - run:
                name: Create release tag (without pushing)
                command: |
                  ./gradlew -b version.gradle toReleaseVersion --info --stacktrace
                  git add .
                  git commit -m "Perform release [ci skip]"
                  GRADLE_VERSION=$(cat ./gradle.properties | grep "version=" | cut -d'=' -f2)
                  git tag -a release-$GRADLE_VERSION -m "Tagging current version"
            - run:
                name: Prepare for next development version (without pushing)
                command: |
                  ./gradlew -b version.gradle nextPatchSnapshotVersion --info --stacktrace
                  git add .
                  git commit -m "Prepare next development version [ci skip]"
            - run:
                name: Merge to master (without pushing)
                command: |
                  git checkout develop
                  git branch --set-upstream-to=origin/develop develop
                  # get latest changes on develop
                  git pull
                  git merge --no-edit master -m "Merge master to develop [ci skip]"
            - run:
                name: Push all changes (as one)
                command: |
                  git push --atomic origin master develop --tags

workflows:
  # MASTER BRANCH FLOW
  'master-flow':
    jobs:
      - create-git-release:
          filters:
            branches:
              only: master
  # TAG FLOW
  'tag-flow':
    jobs:
      - build:
          name: Build with Gradle
          filters: *filters
      - publish_team:
          context: global
          name: Publish team scope release
          filters: *filters
          requires:
            - Build with Gradle
      - publish_partner:
          context: partner
          name: Publish partner scope release
          filters: *filters
          requires:
            - Build with Gradle

  # DEVELOP BRANCH FLOW
  'dev-and-feature-flow':
    jobs:
      - build:
          name: Build with Gradle
          filters:
            branches:
              only:
                - develop
      - publish_team:
          context: global
          name: Publish team scope snapshot
          filters:
            branches:
              only:
                - develop
          requires:
            - Build with Gradle
      - publish_partner:
          context: partner
          name: Publish partner scope snapshot
          filters:
            branches:
              only:
                - develop
          requires:
            - Build with Gradle

  # DEVELOP BRANCH FLOW
  'owasp-flow':
    jobs:
      - owasp/gradle_owasp_dependency_check:
          name: OWASP
          executor: java_17
          task: 'dependencyCheckAnalyze --info'
          filters:
            branches:
              only:
                - develop
