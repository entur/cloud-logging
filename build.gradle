
plugins {
    id 'com.github.ben-manes.versions' version '0.46.0' apply false
    id 'org.owasp.dependencycheck' version '8.2.1' apply false
    id "org.sonarqube" version "4.0.0.2929"
}

// Split projects into buildable: examples and libraries. 
// This omits 'wrapper' directories. See also settings.gradle
 
def buildProjects() {
    subprojects.findAll { new File(it.projectDir, 'build.gradle').file }
}

def exampleProjects() {
    buildProjects().findAll { it.name.endsWith("-example") }
}

def libraryProjects() {
    buildProjects().findAll { !exampleProjects().contains(it) }
}

configure(exampleProjects()) {
    apply plugin: 'java'

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configure(libraryProjects()) {
    apply plugin: 'java-library'
    
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configure(buildProjects()) {
    apply plugin: 'java'
    apply plugin: 'com.github.ben-manes.versions'

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    
    ext {
        junitJupiterVersion = '5.9.3'
        mockitoVersion = '5.3.1'
        logbackLogstashVersion = '7.4'
        slf4jVersion = '2.0.7'
        googleTruthVersion = '1.1.5'
        logbackVersion = '1.4.11'
        jacksonVersion = '2.15.2'
        jacksonDatabindVersion = '2.15.2'
        nettyTcnativeBoringsslStaticVersion = '2.0.61.Final'
        nettyVersion = '4.1.92.Final'
        micrometerVersion = '1.11.4'
        springBootVersion = '3.1.4' // https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-dependencies/
        janinoVersion = '3.1.10'
        servletVersion = '6.0.0' // jakarta
        logbookVersion = '3.4.0'
        jacksonSyntaxHighlightVersion = '1.0.8'
        logbackLogstashSyntaxHighlightingDecoratorsVersion = '1.0.7'
        commonsIoVersion = '2.13.0'
        commonsTextVersion = '1.10.0'

        grpcNettyVersion = '1.57.2'
        grpcVersion = '1.57.2'
        grpcCommonsVersion = '2.23.0'
        grpcProtobufVersion = '3.24.1'
        jsonAssertVersion = '0.6.2'
        jsonPathVersion = '2.8.0'
        jsonSmartVersion = '2.4.11'

        lognetVersion = '5.1.4'
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter', 'junit-vintage'
        }
    }

    java {
        withSourcesJar()
    }

    dependencies {
        components.all(LogbackAlignmentRule)

        // JUnit Jupiter API and TestEngine implementation
        testImplementation("org.junit.jupiter:junit-jupiter:${junitJupiterVersion}")

        testImplementation("org.mockito:mockito-core:${mockitoVersion}")

        testImplementation("com.google.truth:truth:${googleTruthVersion}")
        testImplementation("com.google.truth.extensions:truth-java8-extension:${googleTruthVersion}")
    }

}

// projects which should be published
configure(libraryProjects()) {
    apply plugin: 'maven-publish'

    publishing {

        publications {
            maven(MavenPublication) {
                groupId = "no.entur.logging.cloud"
                artifactId = project.name
                version = "$version"

                from components.java

                pom {
                    name = project.name
                    url = 'https://github.com/entur/cloud-logging'
                    packaging = 'jar'
                    inceptionYear = '2023'
                    licenses {
                        license {
                            name = 'European Union Public Licence v1.2'
                            url = 'https://www.eupl.eu/'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = "skjolber"
                            name = "Thomas Skj√∏lberg"
                            email = "thomas.rorvik.skjolberg@entur.org"
                        }
                    }
                    scm {
                        url = 'https://github.com/entur/cloud-logging'
                        connection = 'git@github.com:entur/cloud-logging.git'
                    }
                }
            }
        }

        repositories {
            maven {
                credentials {
                    username = "${project.properties['entur_artifactory_user'] ?: System.env.ARTIFACTORY_USER}"
                    password = "${project.properties['entur_artifactory_password'] ?: System.env.ARTIFACTORY_PASSWORD}"
                }

                if (project.hasProperty("publishTarget") && project.getProperty("publishTarget").equals("partner")) {
                    url = "${project.properties['entur_artifactory_contextUrl'] ?: System.env.ARTIFACTORY_URL}/${version.endsWith('SNAPSHOT') ? 'partner-snapshot' : 'partner-release'}"
                } else {
                    url = "${project.properties['entur_artifactory_contextUrl'] ?: System.env.ARTIFACTORY_URL}/${version.endsWith('SNAPSHOT') ? 'entur-snapshot-standard' : 'entur-release-standard'}"
                }
            }
        }
    }
}

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'org.owasp.dependencycheck'

    // OWASP Dependency Check settings
    dependencyCheck {
        analyzedTypes = ['jar'] // the default artifact types that will be analyzed.
        format = 'ALL'
        failBuildOnCVSS = 7
        // Specifies if the build should be failed if a CVSS score equal to or above a specified level is identified.
        suppressionFiles = ["$rootDir/dependencycheck-root-suppression.xml"]
        // specify a list of known issues which contain false-positives
        scanConfigurations = configurations.findAll {
            (!it.name.startsWithAny('androidTest', 'test', 'debug', 'lint', 'kapt', 'spotbugs') && !it.name.contains("AndroidTest") && !it.name.contains("Test") && !it.name.contains("AnnotationProcessor"))
        }.collect {
            it.name
        }
    }

    eclipse {
        classpath {
            downloadSources = true
            downloadJavadoc = true
        }
    }

    // Tell idea to output to build/classes/main instead of /out/
    idea {
        module {
            outputDir file('build/classes/main')
            testOutputDir file('build/classes/test')
        }
    }
    
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

gradle.projectsEvaluated {
    // do not scan testing tools and so on, see https://medium.com/@appmattus/android-security-scanning-your-app-for-known-vulnerabilities-421384603fc5
    // note: must be set after project is evaluated, as Android creates configurations based on the build types
    dependencyCheck {
        scanConfigurations = configurations.findAll {
            (!it.name.startsWithAny('androidTest', 'test', 'debug', 'lint', 'kapt') && !it.name.contains("AndroidTest") && !it.name.contains("Test") && !it.name.contains("AnnotationProcessor"))
        }.collect {
            it.name
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }

}

abstract class LogbackAlignmentRule implements ComponentMetadataRule {
    void execute(ComponentMetadataContext ctx) {
        ctx.details.with {
            if (id.group.startsWith("ch.qos.logback")) {
                belongsTo("ch.qos.logback:logback-virtual-platform:${id.version}")
            }
        }
    }
}



