
plugins {
    id 'com.github.ben-manes.versions' version '0.52.0' apply false // ./gradlew dependencyUpdates
    id "org.sonarqube" version "6.3.1.5724"
    id 'org.jreleaser' version '1.20.0' apply false
}

// Split projects into buildable: examples and libraries. 
// This omits 'wrapper' directories. See also settings.gradle

def buildProjects() {
    subprojects.findAll { new File(it.projectDir, 'build.gradle').file }
}

def platformProjects() {
    buildProjects().findAll { it.name.equals("bom") }
}

def exampleProjects() {
    buildProjects().findAll { it.name.endsWith("-example") }
}

def libraryProjects() {
    buildProjects().findAll { !exampleProjects().contains(it) && !platformProjects().contains(it) }
}

def jvmProjects() {
    buildProjects().findAll { !platformProjects().contains(it) }
}

configure(exampleProjects()) {
    apply plugin: 'java'

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configure(libraryProjects()) {
    apply plugin: 'java-library'

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configure(jvmProjects()) {
    apply plugin: 'com.github.ben-manes.versions'

    ext {
        springBootVersion = '3.5.5' // https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-dependencies/
        junitJupiterVersion = '5.12.2'
        mockitoVersion = '5.19.0'
        logbackLogstashVersion = '8.1'
        slf4jVersion = '2.0.17'
        googleTruthVersion = '1.4.4'
        logbackVersion = '1.5.18'
        jacksonVersion = '2.19.2'
        jacksonDatabindVersion = '2.19.2'
        nettyTcnativeBoringsslStaticVersion = '2.0.73.Final'
        nettyVersion = '4.1.124.Final'
        micrometerVersion = '1.15.3'
        janinoVersion = '3.1.12'
        servletVersion = '6.0.0' // jakarta
        logbookVersion = '3.12.3'
        jacksonSyntaxHighlightVersion = '1.1.1'
        logbackLogstashSyntaxHighlightingDecoratorsVersion = '1.1.1'
        commonsIoVersion = '2.20.0'
        commonsTextVersion = '1.14.0'
        annotationApiVersion = '2.1.1'

        grpcNettyVersion = '1.75.0'
        grpcVersion = '1.75.0'
        grpcCommonsVersion = '2.61.0'
        grpcProtobufVersion = '3.25.8'
        ecosystemGrpcVersion = '3.1.0.RELEASE'

        jsonAssertVersion = '0.8.0'
        jsonPathVersion = '2.9.0'
        jsonSmartVersion = '2.6.0'
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter', 'junit-vintage'
        }
    }

    dependencies {
        components.all(LogbackAlignmentRule)
        components.all(GrpcAlignmentRule)
        components.all(ProtobufAlignmentRule)
        components.all(JunitAlignmentRule)

        // JUnit Jupiter API and TestEngine implementation
        testImplementation("org.junit.jupiter:junit-jupiter:${junitJupiterVersion}")

        // https://stackoverflow.com/questions/79640685/cannot-build-project-after-upgrading-spring-boot-to-3-5
        testRuntimeOnly "org.junit.platform:junit-platform-launcher:1${junitJupiterVersion.substring(1)}"
        testImplementation("org.mockito:mockito-core:${mockitoVersion}")

        testImplementation("com.google.truth:truth:${googleTruthVersion}")
        testImplementation("com.google.truth.extensions:truth-java8-extension:${googleTruthVersion}")
    }

    // from https://github.com/ben-manes/gradle-versions-plugin?tab=readme-ov-file#rejectversionsif-and-componentselection
    def isNonStable = { String version ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { ita -> version.toUpperCase().contains(ita) }
        def regex = /^[0-9,.v-]+(-r)?$/
        return !stableKeyword && !(version ==~ regex)
    }

    tasks.named("dependencyUpdates").configure {
        rejectVersionIf {
            isNonStable(it.candidate.version)
        }
    }
}

ext.stagingRepositoryPath = "${rootDir.getCanonicalFile()}/build/staging-deploy"
System.out.println("Staging repository is " + ext.stagingRepositoryPath)

// projects which should be published
configure(libraryProjects()) {
    apply plugin: 'maven-publish'

    java {
        withSourcesJar()
        withJavadocJar()
    }

    publishing {

        publications {
            maven(MavenPublication) {
                from components.java

                groupId = "$group"
                artifactId = project.name

                if(project.ext.has('artifactId')) {
                    System.out.println("Publishing " + project.name + " with artifact-id " + project.ext.artifactId)
                }

                pom {
                    name = "${!project.ext.has('artifactId') ? project.name : project.ext.artifactId}"
                    url = 'https://github.com/entur/cloud-logging'
                    packaging = 'jar'
                    inceptionYear = '2023'
                    description = project.name

                    licenses {
                        license {
                            name = 'European Union Public Licence v1.2'
                            url = 'https://www.eupl.eu/'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = "skjolber"
                            name = "Thomas Skj√∏lberg"
                            email = "thomas.rorvik.skjolberg@entur.org"
                        }
                    }
                    scm {
                        url = 'https://github.com/entur/cloud-logging'
                        connection = 'git@github.com:entur/cloud-logging.git'
                    }
                }
            }
        }

        repositories {
            maven {
                url = stagingRepositoryPath
            }
        }
    }

}

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    eclipse {
        classpath {
            downloadSources = true
            downloadJavadoc = true
        }
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
    
    repositories {
        mavenLocal()
        mavenCentral()
    }

}

abstract class LogbackAlignmentRule implements ComponentMetadataRule {
    void execute(ComponentMetadataContext ctx) {
        ctx.details.with {
            if (id.group.startsWith("ch.qos.logback")) {
                belongsTo("ch.qos.logback:logback-virtual-platform:${id.version}")
            }
        }
    }
}

abstract class GrpcAlignmentRule implements ComponentMetadataRule {
    void execute(ComponentMetadataContext ctx) {
        ctx.details.with {
            if (id.group.startsWith("io.grpc")) {
                belongsTo("io.grpc:grpc-virtual-platform:${id.version}")
            }
        }
    }
}
abstract class ProtobufAlignmentRule implements ComponentMetadataRule {
    void execute(ComponentMetadataContext ctx) {
        ctx.details.with {
            if (id.group.startsWith("com.google.protobuf")) {
                belongsTo("com.google.protobuf:protobuf-virtual-platform:${id.version}")
            }
        }
    }
}

abstract class JunitAlignmentRule implements ComponentMetadataRule {
    void execute(ComponentMetadataContext ctx) {
        ctx.details.with {
            if (id.group.startsWith("org.junit.jupiter ")) {
                belongsTo("org.junit.jupiter:junit-virtual-platform:${id.version}")
            }
        }
    }
}



task clean {
    //project.delete(files(getBuildDir()) {
    //})
}

apply plugin: 'org.jreleaser'

jreleaser {
    signing {
        active = 'ALWAYS'
        armored = true
    }
    deploy {
        maven {
            mavenCentral {
                release {
                    active = 'RELEASE'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository(stagingRepositoryPath)
                }
            }
            nexus2 {
                snapshot {
                    active = 'SNAPSHOT'
                    applyMavenCentralRules = true
                    snapshotSupported = true
                    closeRepository = true
                    releaseRepository = true
                    url = "https://ossrh-staging-api.central.sonatype.com/service/local"
                    snapshotUrl = 'https://central.sonatype.com/repository/maven-snapshots/'
                    stagingRepository(stagingRepositoryPath)
                }
            }
        }
    }
    release {
        github {
            skipTag = false // Skip creating a new github tag?
            skipRelease = true // Skip creating a new github release?
        }
    }
}
